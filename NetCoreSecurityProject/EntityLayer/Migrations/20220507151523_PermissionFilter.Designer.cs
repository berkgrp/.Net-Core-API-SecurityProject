// <auto-generated />
using System;
using EntityLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityLayer.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20220507151523_PermissionFilter")]
    partial class PermissionFilter
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities_HBKSOFTWARE.JwtModels.RefreshToken", b =>
                {
                    b.Property<int>("TokenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("TokenID");

                    b.HasIndex("UserID");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("EntityLayer.Models.Log", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogID");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("EntityLayer.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RoleGroupID")
                        .HasColumnType("int");

                    b.Property<long?>("RoleIDForBitwise")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.HasIndex("RoleGroupID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleGroupID = 1,
                            RoleIDForBitwise = 1L,
                            RoleName = "GetUser"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleGroupID = 1,
                            RoleIDForBitwise = 2L,
                            RoleName = "Get"
                        },
                        new
                        {
                            RoleID = 3,
                            RoleGroupID = 1,
                            RoleIDForBitwise = 4L,
                            RoleName = "Post"
                        },
                        new
                        {
                            RoleID = 4,
                            RoleGroupID = 1,
                            RoleIDForBitwise = 8L,
                            RoleName = "Update"
                        });
                });

            modelBuilder.Entity("EntityLayer.Models.RoleGroup", b =>
                {
                    b.Property<int>("RoleGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleGroupID");

                    b.ToTable("RoleGroups");

                    b.HasData(
                        new
                        {
                            RoleGroupID = 1,
                            GroupName = "User"
                        });
                });

            modelBuilder.Entity("EntityLayer.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            UserEmail = "AdminPaneli@gmail.com",
                            UserGuidID = new Guid("ac4d7700-a339-4b56-b1cf-d38aa6ec9e6c"),
                            UserName = "Admin",
                            UserPassword = "AdminGitHub",
                            UserSurname = "Admin"
                        },
                        new
                        {
                            UserID = 2,
                            UserEmail = "Kullanici@gmail.com",
                            UserGuidID = new Guid("7828c2e8-69a6-4578-93dd-7575d63740df"),
                            UserName = "Kullanici",
                            UserPassword = "KullaniciGitHub",
                            UserSurname = "Kullanici"
                        });
                });

            modelBuilder.Entity("EntityLayer.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RoleGroupID")
                        .HasColumnType("int");

                    b.Property<long?>("Roles")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserRoleID");

                    b.HasIndex("RoleGroupID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserRoleID = 1,
                            RoleGroupID = 1,
                            Roles = 7L,
                            UserID = 1
                        },
                        new
                        {
                            UserRoleID = 2,
                            RoleGroupID = 2,
                            Roles = 15L,
                            UserID = 2
                        });
                });

            modelBuilder.Entity("Entities_HBKSOFTWARE.JwtModels.RefreshToken", b =>
                {
                    b.HasOne("EntityLayer.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Models.Role", b =>
                {
                    b.HasOne("EntityLayer.Models.RoleGroup", "RoleGroup")
                        .WithMany("Roles")
                        .HasForeignKey("RoleGroupID");

                    b.Navigation("RoleGroup");
                });

            modelBuilder.Entity("EntityLayer.Models.UserRole", b =>
                {
                    b.HasOne("EntityLayer.Models.RoleGroup", "RoleGroup")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleGroupID");

                    b.HasOne("EntityLayer.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID");

                    b.Navigation("RoleGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Models.RoleGroup", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EntityLayer.Models.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
